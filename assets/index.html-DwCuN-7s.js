import{_ as s,c as a,a as e,o as i}from"./app-DUomSOUZ.js";const l={};function p(r,n){return i(),a("div",null,n[0]||(n[0]=[e(`<h2 id="搭建" tabindex="-1"><a class="header-anchor" href="#搭建"><span>搭建</span></a></h2><ol><li><p>空maven项目</p><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">创建完成删除src</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>注册中心</p><p><strong>Eureka注册中心</strong></p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1.创建module</span></span>
<span class="line"><span>2.添加依赖 Eureka Discovery、Eureka Server</span></span>
<span class="line"><span>3.启动类添加 @EnableEurekaServer</span></span>
<span class="line"><span>4.配置yml</span></span>
<span class="line"><span>    server:</span></span>
<span class="line"><span>      port: 8801</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>    eureka:</span></span>
<span class="line"><span>      instance:</span></span>
<span class="line"><span>        hostname: localhost</span></span>
<span class="line"><span>      client:</span></span>
<span class="line"><span>        registerWithEureka: false</span></span>
<span class="line"><span>        fetchRegistry: false</span></span>
<span class="line"><span>        serviceUrl:</span></span>
<span class="line"><span>          defaultZone: http://\${eureka.instance.hostname}:\${server.port}/eureka/</span></span>
<span class="line"><span>5.测试 localhost:8801</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Zookeeper注册中心</strong></p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span></span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>服务提供</p><p><strong>rest+ribbon</strong></p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1.创建module</span></span>
<span class="line"><span>2.添加依赖 Eureka Discovery、Eureka Server、Ribbon</span></span>
<span class="line"><span>3.启动类添加 </span></span>
<span class="line"><span>   @SpringBootApplication</span></span>
<span class="line"><span>   @EnableDiscoveryClient</span></span>
<span class="line"><span>   @ComponentScan</span></span>
<span class="line"><span>   public class RibbonConsumerApplication {</span></span>
<span class="line"><span>       public static void main(String[] args) {</span></span>
<span class="line"><span>           SpringApplication.run(RibbonConsumerApplication.class, args);</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span>       @Bean</span></span>
<span class="line"><span>       @Autowired</span></span>
<span class="line"><span>       @LoadBalanced</span></span>
<span class="line"><span>       RestTemplate getRestTemplate() {</span></span>
<span class="line"><span>           return new RestTemplate();</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>4.创建测试服务</span></span>
<span class="line"><span>   @Service</span></span>
<span class="line"><span>   public class HelloService {</span></span>
<span class="line"><span>       public String sayHello(){</span></span>
<span class="line"><span>           return &quot;helloWorld&quot;; // 提供一个hello World</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>   @RestController</span></span>
<span class="line"><span>   public class HelloController {</span></span>
<span class="line"><span>       @Autowired</span></span>
<span class="line"><span>       private HelloService helloService;</span></span>
<span class="line"><span>       @GetMapping(&quot;/hello&quot;)</span></span>
<span class="line"><span>       public String sayHello(String name){</span></span>
<span class="line"><span>           return helloService.sayHello() + &quot; &quot; + name;</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span>   }</span></span>
<span class="line"><span>5. 配置yml</span></span>
<span class="line"><span>    eureka:</span></span>
<span class="line"><span>      client:</span></span>
<span class="line"><span>        serviceUrl:</span></span>
<span class="line"><span>          defaultZone: http://localhost:8801/eureka/</span></span>
<span class="line"><span>    server:</span></span>
<span class="line"><span>      port: 8802</span></span>
<span class="line"><span>    spring:</span></span>
<span class="line"><span>      application:</span></span>
<span class="line"><span>        name: ribbon-provider</span></span>
<span class="line"><span>6.测试 localhost:8802/hello?name=zhangtaifeng</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>服务消费</p><p><strong>rest+ribbon消费</strong></p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@Service</span></span>
<span class="line"><span>public class HelloService {</span></span>
<span class="line"><span>    @Autowired</span></span>
<span class="line"><span>    RestTemplate restTemplate;</span></span>
<span class="line"><span>    public String sayHello(){</span></span>
<span class="line"><span>        return restTemplate.getForObject(&quot;http://ribbon-provider/hello?name=jc2&quot;, String.class);</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Feign消费</strong></p><div class="language-yaml line-numbers-mode" data-ext="yaml" data-title="yaml"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>1.创建module</span></span>
<span class="line"><span>    2.添加依赖 Eureka Discovery、Eureka Server、Feign</span></span>
<span class="line"><span>    3.启动类添加 </span></span>
<span class="line"><span>       注册服务 -- @EnableDiscoveryClient</span></span>
<span class="line"><span>       注入Fegin -- @EnableFeignClients</span></span>
<span class="line"><span>    4.创建测试服务</span></span>
<span class="line"><span>       @FeignClient(value = &quot;ribbon-consumer&quot;)</span></span>
<span class="line"><span>       public interface GetHello {</span></span>
<span class="line"><span>           @RequestMapping(value = &quot;/hello?name=feign&quot;, method = RequestMethod.GET)</span></span>
<span class="line"><span>           public String sayHello();</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span>       @Service</span></span>
<span class="line"><span>       public class HelloService {</span></span>
<span class="line"><span>           @Autowired</span></span>
<span class="line"><span>           GetHello getHello;</span></span>
<span class="line"><span>           public String sayHello(){</span></span>
<span class="line"><span>               return getHello.sayHello();</span></span>
<span class="line"><span>           }</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span>       @RestController</span></span>
<span class="line"><span>       public class HelloController {</span></span>
<span class="line"><span>           @Autowired</span></span>
<span class="line"><span>           private HelloService helloService;</span></span>
<span class="line"><span>           @GetMapping(&quot;/hello&quot;)</span></span>
<span class="line"><span>           public String sayHello(String name){</span></span>
<span class="line"><span>               return helloService.sayHello() + &quot; &quot; + name;</span></span>
<span class="line"><span>           }</span></span>
<span class="line"><span>       }</span></span>
<span class="line"><span>    5. 配置yml</span></span>
<span class="line"><span>        eureka:</span></span>
<span class="line"><span>          client:</span></span>
<span class="line"><span>            serviceUrl:</span></span>
<span class="line"><span>              defaultZone: http://localhost:8801/eureka/</span></span>
<span class="line"><span>        server:</span></span>
<span class="line"><span>          port: 8802</span></span>
<span class="line"><span>        spring:</span></span>
<span class="line"><span>          application:</span></span>
<span class="line"><span>            name: ribbon-provider</span></span>
<span class="line"><span>    6.测试 localhost:8802/hello?name=zhangtaifeng</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>说明</p><p><strong>服务发现Eureka</strong></p><p><strong>云端负载Ribbon</strong></p><p><strong>HTTP客户端Feign</strong></p><p><strong>熔断器Hystrix</strong></p><p><strong>动态路由Zuul</strong></p><p><strong>消息总线Spring Cloud Bus</strong></p><p><strong>日志收集Spring Cloud Sleuth</strong></p><p><strong>安全工具包Spring Cloud OAuth2</strong></p></li></ol>`,2)]))}const t=s(l,[["render",p],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/%E8%AF%AD%E8%A8%80/n4ky2ukd/","title":"SpringCloud","lang":"zh-CN","frontmatter":{"title":"SpringCloud","createTime":"2020/09/06 10:46:49","permalink":"/语言/n4ky2ukd/","description":"搭建 空maven项目 注册中心 Eureka注册中心 Zookeeper注册中心 服务提供 rest+ribbon 服务消费 rest+ribbon消费 Feign消费 说明 服务发现Eureka 云端负载Ribbon HTTP客户端Feign 熔断器Hystrix 动态路由Zuul 消息总线Spring Cloud Bus 日志收集Spring C...","head":[["meta",{"property":"og:url","content":"https://orthogonalandparallel.github.io/%E8%AF%AD%E8%A8%80/n4ky2ukd/"}],["meta",{"property":"og:site_name","content":"万里任禅游"}],["meta",{"property":"og:title","content":"SpringCloud"}],["meta",{"property":"og:description","content":"搭建 空maven项目 注册中心 Eureka注册中心 Zookeeper注册中心 服务提供 rest+ribbon 服务消费 rest+ribbon消费 Feign消费 说明 服务发现Eureka 云端负载Ribbon HTTP客户端Feign 熔断器Hystrix 动态路由Zuul 消息总线Spring Cloud Bus 日志收集Spring C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-01T13:12:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-01T13:12:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringCloud\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-01T13:12:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":1.33,"words":400},"git":{"updatedTime":1751375537000,"contributors":[{"name":"靳琛","email":"jinchenj@yonyou.com","commits":1,"avatar":"https://avatars.githubusercontent.com/靳琛?v=4","url":"https://github.com/靳琛"}]},"autoDesc":true,"filePathRelative":"笔记/语言/后端/springcloud.md","categoryList":[{"id":"7051dc","sort":10000,"name":"笔记"},{"id":"d592ad","sort":10015,"name":"语言"},{"id":"83a577","sort":10018,"name":"后端"}],"bulletin":false}');export{t as comp,d as data};
