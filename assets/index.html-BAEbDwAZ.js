import{_ as n,c as e,a as i,b as l,e as s,o as t}from"./app-DUomSOUZ.js";const r={};function p(d,a){return t(),e("div",null,a[0]||(a[0]=[i('<h2 id="用途" tabindex="-1"><a class="header-anchor" href="#用途"><span>用途</span></a></h2><ul><li>爬虫</li><li>统计分析</li></ul><h2 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h2><h3 id="属性" tabindex="-1"><a class="header-anchor" href="#属性"><span>属性</span></a></h3><ul><li>变量 <ul><li>变量 a = &#39;&#39;，只能使用数字、字母、下划线，字母、下划线可以开头，不能使用函数名、关键字作为变量</li></ul></li><li>常量 <ul><li>PI 全部大写表示常量</li></ul></li></ul><h3 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h3><ul><li>数字 <ul><li>整数 可执行+ - * /</li><li>浮点数 3.14 1.23e9</li><li>十进制 0，1，2....22,23...</li><li>十六进制 0x为前缀，0-9，a-f 0xff00</li><li>str(num) 数字转换成字符串</li></ul></li><li>字符串 <ul><li>&#39;ok&#39; 或者 “ok”</li><li>\\转义字符 \\n换行 \\t制表  r&#39;&#39;内部字符不转义 &#39;&#39;&#39;...&#39;&#39;&#39;多换行内容</li><li>str.upper() 输出字符串大写</li><li>str.lower() 输出字符串小写</li><li>str.rstrip() 去除空白</li><li>str.title() 首字母大写</li><li>len(&#39;aaaa&#39;) 字符串长度</li><li>str1+str2 拼接字符串</li></ul></li><li>布尔值 <ul><li>True False</li></ul></li><li>空值 <ul><li>None</li></ul></li><li>字节 <ul><li>b&#39;lalala&#39;</li></ul></li></ul><h3 id="集合" tabindex="-1"><a class="header-anchor" href="#集合"><span>集合</span></a></h3>',8),l("ul",null,[l("li",null,[s("列表 -- list（有序，可变）classmates = ['A', 'B', 'C'] "),l("ul",null,[l("li",null,"长度 --- len(classmates)"),l("li",null,"索引 -- classmates[0] classmates[-1]"),l("li",null,[s("新增 "),l("ul",null,[l("li",null,"classmates.append('D') 拼接"),l("li",null,"classmates.insert(1, 'a') 插入")])]),l("li",null,[s("删除 "),l("ul",null,[l("li",null,"del classmates[0]"),l("li",null,"classmates.pop() pop从末尾开始删除元素"),l("li",null,"classmates.pop(index)"),l("li",null,"classamtes.remove('name') 根据元素名称对其进行删除")])]),l("li",null,[s("修改 "),l("ul",null,[l("li",null,"classmates[1] = 'b'")])]),l("li",null,[s("多维 "),l("ul",null,[l("li",null,"list classmates = ['A', ['B', ['C', 'D']]]")])]),l("li",null,[s("排序 "),l("ul",null,[l("li",null,"classmates.sort() 按字母顺序排序"),l("li",null,"classmates.sort(reverse=True) 按字母顺序反序排序"),l("li",null,"sorted(classmates) 暂时按字母排序"),l("li",null,"sorted(classmates, reverse=True) 暂时按字母顺序反序排序")])]),l("li",null,[s("列表生成 "),l("ul",null,[l("li",null,"range(1, 5) 生成1-4四个数字"),l("li",null,"list(range(1, 5)) 将1-4四个数字转换成列表"),l("li",null,"max(classmates) 取出最大值"),l("li",null,"min(classmates) 取出最小值"),l("li",null,"sum(classmates) 计算合计")])]),l("li",null,[s("列表解析 "),l("ul",null,[l("li",null,"p = [num**2 for num in range(1, 11)]")])]),l("li",null,[s("切片 "),l("ul",null,[l("li",null,"p[3:7]")])])])]),l("li",null,[s("元组 "),l("ul",null,[l("li",null,"tuple（有序，不变）t1 = ('A', 'B')"),l("li",null,"classmates = ('A', 'B', 'C') 元素内容不可变"),l("li",null,"classmates = ('A',['B', 'C'])元素中内容可变")])]),l("li",{"name:xiaoming,":"","age:18,":"","Bob:lala":""},[s("字典 -- dict（无序，指针，可变） d1 = "),l("ul",null,[l("li",null,"索引 -- d1['Bob']  d1.get('Bob')  'Bob' in d1"),l("li",null,"新增 -- d1['AA'] = 'aa'"),l("li",null,"修改 -- d1['AA'] = 'bb'"),l("li",null,[s("删除 "),l("ul",null,[l("li",null,"del d1['Bob']"),l("li",null,"d1.pop('Bob')")])]),l("li",null,"获取字典中的键 -- d1.keys()"),l("li",null,"获取字典中的值 -- d1.values()")])]),l("li",null,[s("组合 "),l("ul",null,[l("li",null,"set（无序，不变）s = set([1,2,3])")])])],-1),i(`<h3 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符"><span>运算符</span></a></h3><ul><li>算法运算符 <ul><li>减法 -</li><li>加法 +</li><li>乘法 *</li><li>除法 /</li><li>取整除法 //</li><li>取余除法 %</li><li>平方 **</li></ul></li><li>逻辑运算符 == != &lt; &gt; &lt;= &gt;= and or not</li></ul><h3 id="流程控制语句" tabindex="-1"><a class="header-anchor" href="#流程控制语句"><span>流程控制语句</span></a></h3><ul><li>条件判断<div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>if &lt;条件判断1&gt;:</span></span>
<span class="line"><span>    &lt;执行1&gt;</span></span>
<span class="line"><span>elif &lt;条件判断2&gt;:</span></span>
<span class="line"><span>    &lt;执行2&gt;</span></span>
<span class="line"><span>elif &lt;条件判断3&gt;:</span></span>
<span class="line"><span>    &lt;执行3&gt;</span></span>
<span class="line"><span>else:</span></span>
<span class="line"><span>    &lt;执行4&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>循环 <ul><li>for循环（已有循环的集合） <ul><li>for循环根据缩进判断程序是否在循环体内。</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>names = [&#39;A&#39;, &#39;B&#39;, &#39;C&#39;];</span></span>
<span class="line"><span>for name in names:</span></span>
<span class="line"><span>    print name;</span></span>
<span class="line"><span>print(&#39;aaa&#39;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>while循环（已有循环的条件）<div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>sum = 0</span></span>
<span class="line"><span>n = 100</span></span>
<span class="line"><span>while n &gt; 0:</span></span>
<span class="line"><span>    sum = sum + n</span></span>
<span class="line"><span>    n = n-1</span></span>
<span class="line"><span>print(sum)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>break 退出循环</li><li>continue 退出当前循环</li></ul></li></ul><h3 id="其他" tabindex="-1"><a class="header-anchor" href="#其他"><span>其他</span></a></h3><ul><li>输出 print(&#39;text&#39;)</li><li>输入 input(&#39;text&#39;)，然后用户手动输入​</li><li>注释 符号#注释单行代码  &#39;&#39;&#39; &#39;&#39;&#39;或者&quot;&quot;&quot;&quot;&quot;&quot;注释多行代码</li><li>格式 Python大小写敏感</li><li>编码 <ul><li>ASCll/UTF-8--&gt;Unicode</li><li>字符串取编码十进制数 ord(‘A’)</li><li>十进制编码转字符串 chr(65)</li><li>字符串转字节 &#39;ABC&#39;.encode(&#39;ascii&#39;)   &#39;中&#39;.encode(&#39;utf-8&#39;)</li><li>字节转字符串  b‘ABC’.decode(&#39;ascii&#39;)</li><li>声明文档编码</li></ul><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>！/user/bin/env python3</span></span>
<span class="line"><span>-*-  codin: utf-8  -*-</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>格式化 <ul><li>%？ 占位符</li><li>%d  整数</li><li>%s  字符串</li><li>%x  十六进制数</li><li>%%  表示%</li></ul></li><li>迭代 <ul><li>迭代一切可以迭代的对象</li></ul></li><li>生成器 generator <ul><li>一边循环一边计算的机制，称为生成器，节省内存空间。</li></ul></li><li>Python之禅 import this</li></ul><h2 id="类库-模块" tabindex="-1"><a class="header-anchor" href="#类库-模块"><span>类库&amp;模块</span></a></h2><h3 id="进程和线程" tabindex="-1"><a class="header-anchor" href="#进程和线程"><span>进程和线程</span></a></h3><p><strong>多线程</strong> 全局解释锁 threading</p><p><strong>多进程</strong> multiprocessing模块</p><ul><li>使用 Process</li><li>通信 Queue</li><li>进程池 Pool</li></ul><h3 id="分布式计算" tabindex="-1"><a class="header-anchor" href="#分布式计算"><span>分布式计算</span></a></h3><p><strong>Hadoop&amp;Mrjob</strong></p><ul><li>数据保存在硬盘</li></ul><p><strong>Spark</strong></p><ul><li>数据保存在内存中</li><li>RDD <ul><li>弹性分布式数据集</li></ul></li></ul><h3 id="正则表达式-re-datetime" tabindex="-1"><a class="header-anchor" href="#正则表达式-re-datetime"><span>正则表达式 re datetime</span></a></h3><h3 id="时间和日期-time" tabindex="-1"><a class="header-anchor" href="#时间和日期-time"><span>时间和日期 time</span></a></h3><h3 id="迭代器模块itertools、enumerate" tabindex="-1"><a class="header-anchor" href="#迭代器模块itertools、enumerate"><span>迭代器模块itertools、enumerate</span></a></h3><h3 id="集合模块collections" tabindex="-1"><a class="header-anchor" href="#集合模块collections"><span>集合模块collections</span></a></h3><h2 id="框架" tabindex="-1"><a class="header-anchor" href="#框架"><span>框架</span></a></h2><h3 id="opencv框架" tabindex="-1"><a class="header-anchor" href="#opencv框架"><span>OpenCV框架</span></a></h3><h3 id="django框架" tabindex="-1"><a class="header-anchor" href="#django框架"><span>Django框架</span></a></h3><h3 id="flask框架" tabindex="-1"><a class="header-anchor" href="#flask框架"><span>Flask框架</span></a></h3><h2 id="用途-1" tabindex="-1"><a class="header-anchor" href="#用途-1"><span>用途</span></a></h2><h3 id="爬虫" tabindex="-1"><a class="header-anchor" href="#爬虫"><span>爬虫</span></a></h3><h3 id="数据分析" tabindex="-1"><a class="header-anchor" href="#数据分析"><span>数据分析</span></a></h3><h2 id="python虚拟环境" tabindex="-1"><a class="header-anchor" href="#python虚拟环境"><span>Python虚拟环境</span></a></h2><div class="language-shell line-numbers-mode" data-ext="shell" data-title="shell"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 创建python虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">uv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> venv</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --python</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 3.11</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 激活pyhton虚拟环境</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">source</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .venv/bin/activate</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 安装依赖包</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">uv</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pip</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> install</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -r</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29)]))}const u=n(r,[["render",p],["__file","index.html.vue"]]),o=JSON.parse(`{"path":"/%E8%AF%AD%E8%A8%80/q0ogcwzk/","title":"Python","lang":"zh-CN","frontmatter":{"title":"Python","createTime":"2020/05/09","tags":["Python"],"categories":["后端","语言","Python"],"permalink":"/语言/q0ogcwzk/","description":"用途 爬虫 统计分析 语法 属性 变量 变量 a = ''，只能使用数字、字母、下划线，字母、下划线可以开头，不能使用函数名、关键字作为变量 常量 PI 全部大写表示常量 基本数据类型 数字 整数 可执行+ - * / 浮点数 3.14 1.23e9 十进制 0，1，2....22,23... 十六进制 0x为前缀，0-9，a-f 0xff00 str...","head":[["meta",{"property":"og:url","content":"https://orthogonalandparallel.github.io/%E8%AF%AD%E8%A8%80/q0ogcwzk/"}],["meta",{"property":"og:site_name","content":"万里任禅游"}],["meta",{"property":"og:title","content":"Python"}],["meta",{"property":"og:description","content":"用途 爬虫 统计分析 语法 属性 变量 变量 a = ''，只能使用数字、字母、下划线，字母、下划线可以开头，不能使用函数名、关键字作为变量 常量 PI 全部大写表示常量 基本数据类型 数字 整数 可执行+ - * / 浮点数 3.14 1.23e9 十进制 0，1，2....22,23... 十六进制 0x为前缀，0-9，a-f 0xff00 str..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-05T06:42:56.000Z"}],["meta",{"property":"article:tag","content":"Python"}],["meta",{"property":"article:modified_time","content":"2025-07-05T06:42:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Python\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-05T06:42:56.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.27,"words":981},"git":{"updatedTime":1751697776000,"contributors":[{"name":"靳琛","email":"jinchenj@yonyou.com","commits":2,"avatar":"https://avatars.githubusercontent.com/靳琛?v=4","url":"https://github.com/靳琛"}]},"autoDesc":true,"filePathRelative":"笔记/语言/后端/python.md","categoryList":[{"id":"7051dc","sort":10000,"name":"笔记"},{"id":"d592ad","sort":10015,"name":"语言"},{"id":"83a577","sort":10018,"name":"后端"}],"bulletin":false}`);export{u as comp,o as data};
