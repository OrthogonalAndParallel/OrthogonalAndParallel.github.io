import{_ as e,c as s,a as n,o as i}from"./app-DUomSOUZ.js";const r={};function t(p,a){return i(),s("div",null,a[0]||(a[0]=[n(`<h2 id="开发范例" tabindex="-1"><a class="header-anchor" href="#开发范例"><span>开发范例</span></a></h2><h3 id="实体" tabindex="-1"><a class="header-anchor" href="#实体"><span>实体</span></a></h3><h4 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>@Data</span></span>
<span class="line"><span>@NoArgsConstructor</span></span>
<span class="line"><span>@AllArgsConstructor</span></span>
<span class="line"><span>@Builder</span></span>
<span class="line"><span>public class ExtractorDTO {</span></span>
<span class="line"><span>    private String startTime;</span></span>
<span class="line"><span>    private String endTime;</span></span>
<span class="line"><span>    private String runTime;</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="转换" tabindex="-1"><a class="header-anchor" href="#转换"><span>转换</span></a></h4><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>import org.mapstruct.Mapper;</span></span>
<span class="line"><span>import org.mapstruct.Mapping;</span></span>
<span class="line"><span>import org.mapstruct.factory.Mappers;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>@Mapper</span></span>
<span class="line"><span>public interface UserMapper {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    UserMapper INSTANCE = Mappers.getMapper(UserMapper.class);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    @Mapping(source = &quot;id&quot;, target = &quot;userId&quot;)</span></span>
<span class="line"><span>    @Mapping(source = &quot;name&quot;, target = &quot;fullName&quot;)</span></span>
<span class="line"><span>    @Mapping(source = &quot;email&quot;, target = &quot;emailAddress&quot;)</span></span>
<span class="line"><span>    UserDTO toDTO(UserEntity userEntity);</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命名" tabindex="-1"><a class="header-anchor" href="#命名"><span>命名</span></a></h2><h3 id="接口命名" tabindex="-1"><a class="header-anchor" href="#接口命名"><span>接口命名</span></a></h3><p>使用形容词或名词短语来描述能力或角色。 常见的后缀有 -able, -ible 或 er。 示例：Readable, Writable, Runner, Processor。</p><h3 id="实现类命名" tabindex="-1"><a class="header-anchor" href="#实现类命名"><span>实现类命名</span></a></h3><p>使用具体的名词来描述实际的对象或实体。 如果是默认实现，可以加上 Default 前缀。 如果是具体实现，可以根据功能添加描述性前缀或后缀。 示例：DefaultReader, FileWriter, ThreadRunner, ImageProcessor。</p><h4 id="service" tabindex="-1"><a class="header-anchor" href="#service"><span>Service</span></a></h4><p>意图: 提供一个完整的业务功能，通常是面向更高层的抽象。 关注业务逻辑，通常集成多个操作或功能。 语义: 强调服务化，与系统其他部分协作。 典型场景: 业务服务（如 UserService） 功能性服务（如 EmailService） 微服务架构中的模块化服务 示例: OrderService: 负责订单的创建、更新和查询。 NotificationService: 提供通知的发送和管理功能。</p><h4 id="processor" tabindex="-1"><a class="header-anchor" href="#processor"><span>Processor</span></a></h4><p>意图: 专注于数据的加工、转换或处理，往往是流式或批量操作。 强调对输入数据的处理并生成输出数据，通常是更复杂的逻辑。 语义: 强调执行一系列处理流程。 典型场景: 数据处理（如 DataProcessor） 消息处理（如 MessageProcessor） 流式或批量任务处理（如日志、文件、数据流处理）</p><h4 id="handler" tabindex="-1"><a class="header-anchor" href="#handler"><span>Handler</span></a></h4><p>Handler 意图: 用于处理特定的事件或请求，通常是事件驱动的。 关注单一职责，执行简单的任务。 语义: 强调响应某个触发条件（事件、请求等）。 典型场景: 事件处理（如 EventHandler） 请求处理（如 RequestHandler） 任务处理中的某一环节（如 ErrorHandler） 示例: LoginHandler: 处理登录请求。 ClickEventHandler: 响应用户点击事件。</p><h4 id="checker" tabindex="-1"><a class="header-anchor" href="#checker"><span>Checker</span></a></h4>`,18)]))}const c=e(r,[["render",t],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/%E8%AF%AD%E8%A8%80/java/","title":"java","lang":"zh-CN","frontmatter":{"title":"java","createTime":"2025/06/20 08:35:38","permalink":"/语言/java/","description":"开发范例 实体 定义 转换 命名 接口命名 使用形容词或名词短语来描述能力或角色。 常见的后缀有 -able, -ible 或 er。 示例：Readable, Writable, Runner, Processor。 实现类命名 使用具体的名词来描述实际的对象或实体。 如果是默认实现，可以加上 Default 前缀。 如果是具体实现，可以根据功能添加...","head":[["meta",{"property":"og:url","content":"https://orthogonalandparallel.github.io/%E8%AF%AD%E8%A8%80/java/"}],["meta",{"property":"og:site_name","content":"万里任禅游"}],["meta",{"property":"og:title","content":"java"}],["meta",{"property":"og:description","content":"开发范例 实体 定义 转换 命名 接口命名 使用形容词或名词短语来描述能力或角色。 常见的后缀有 -able, -ible 或 er。 示例：Readable, Writable, Runner, Processor。 实现类命名 使用具体的名词来描述实际的对象或实体。 如果是默认实现，可以加上 Default 前缀。 如果是具体实现，可以根据功能添加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-01T13:12:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-01T13:12:17.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-07-01T13:12:17.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":1.65,"words":495},"git":{"updatedTime":1751375537000,"contributors":[{"name":"靳琛","email":"jinchenj@yonyou.com","commits":1,"avatar":"https://avatars.githubusercontent.com/靳琛?v=4","url":"https://github.com/靳琛"}]},"autoDesc":true,"filePathRelative":"笔记/语言/后端/java.md","categoryList":[{"id":"7051dc","sort":10000,"name":"笔记"},{"id":"d592ad","sort":10015,"name":"语言"},{"id":"83a577","sort":10018,"name":"后端"}],"bulletin":false}');export{c as comp,d as data};
